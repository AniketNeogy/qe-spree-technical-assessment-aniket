name: Playwright Tests
on:
  push:
    branches: ['**']  # Run on any branch
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering from GitHub UI

# Set concurrency to ensure only one workflow runs at a time per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Playwright Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spree_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        # Simplified to just 2 shards
        shard: [1, 2]
        total-shards: [2]
    steps:
      - uses: actions/checkout@v4
      
      # Setup Ruby for Spree application
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true
      
      # Install system dependencies for Spree
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev libpq-dev
      
      # Setup and start the Spree application
      - name: Setup Spree Application
        run: |
          # Configure database
          cp config/database.yml.github-actions config/database.yml || echo "Database config not found, using default"
          
          # Create database.yml if it doesn't exist
          if [ ! -f "config/database.yml" ]; then
            mkdir -p config
            cat > config/database.yml << EOF
          default: &default
            adapter: postgresql
            encoding: unicode
            host: localhost
            port: 5432
            username: postgres
            password: postgres
            pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
          
          development:
            <<: *default
            database: spree_development
          
          test:
            <<: *default
            database: spree_test
          
          production:
            <<: *default
            database: spree_production
          EOF
          fi
          
          # Install Ruby dependencies
          bundle install
          
          # Setup database
          bundle exec rails db:create
          bundle exec rails db:migrate
          
          # Load sample data
          bundle exec rails spree_sample:load
      
      # Start the Spree server in the background
      - name: Start Spree Server
        run: |
          bundle exec rails server -p 3000 -d
          
          # Wait for the server to be ready
          echo "Waiting for server to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:3000/ > /dev/null; do sleep 1; done' || (echo "Server failed to start" && exit 1)
          echo "Server is ready!"
      
      # Now setup Node and Playwright for testing
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'playwright-test/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd playwright-test
          npm ci
      
      - name: Install Playwright browsers
        run: |
          cd playwright-test
          npx playwright install --with-deps
      
      - name: Run Playwright tests
        run: |
          cd playwright-test
          npx playwright test --shard=${{ matrix.shard }}/${{ matrix.total-shards }} --reporter=dot,github,json
        env:
          CI: true
          TEST_WORKER_INDEX: ${{ matrix.shard }}
      
      - name: Upload test results for GitHub Actions Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.shard }}
          path: playwright-test/test-results.json
          retention-days: 30
      
      - name: Upload HTML report for this shard
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.shard }}
          path: playwright-test/playwright-report/
          retention-days: 30
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.shard }}
          path: playwright-test/test-results/
          retention-days: 30

  report:
    name: Generate GitHub Check Report
    needs: [test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Merge test results for report
        run: |
          npm install -g junit-report-merger
          mkdir -p junit-reports
          find all-artifacts -name test-results*.json -type f -exec cp {} junit-reports/ \;
          ls -la junit-reports/
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: "Playwright Test Results"
          files: |
            junit-reports/*.json
          report_individual_runs: true
          deduplicate_classes_by_file_name: false

  merge_reports:
    name: Merge Test Reports
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd playwright-test
          npm ci
      
      - name: Install Playwright
        run: |
          cd playwright-test
          npx playwright install
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: Merge reports
        run: |
          npx playwright merge-reports --reporter html ./all-artifacts/playwright-results-*
          
      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: playwright-report
          retention-days: 30

  publish_report:
    name: Publish HTML Report
    # Run if tests pass or fail, but not if cancelled
    if: "success() || needs.merge_reports.result == 'failure'"
    needs: [merge_reports]
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      # Unique URL path for each workflow run attempt
      HTML_REPORT_URL_PATH: reports/${{ github.ref_name }}/${{ github.run_id }}/${{ github.run_attempt }}
    steps:
      - name: Checkout GitHub Pages Branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          # Create gh-pages branch if it doesn't exist
          if-not-exists: true
      
      - name: Set Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Create empty commit if gh-pages is empty
        run: |
          if [ -z "$(ls -A | grep -v '.git')" ]; then
            git commit --allow-empty -m "Initial commit for GitHub Pages"
            git push origin gh-pages
          fi
      
      - name: Download merged HTML report
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-merged
          path: ${{ env.HTML_REPORT_URL_PATH }}
      
      - name: Push HTML Report
        timeout-minutes: 3
        run: |
          git add .
          git commit -m "workflow: add HTML report for run-id ${{ github.run_id }} (attempt: ${{ github.run_attempt }})"
          
          while true; do
            git pull --rebase
            if [ $? -ne 0 ]; then
              echo "Failed to rebase. Please review manually."
              exit 1
            fi
            
            git push
            if [ $? -eq 0 ]; then
              echo "Successfully pushed HTML report to repo."
              exit 0
            fi
          done
      
      - name: Output Report URL as Workflow Annotation
        run: |
          FULL_HTML_REPORT_URL=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$HTML_REPORT_URL_PATH
          
          echo "::notice title=ðŸ“‹ Published Playwright Test Report::$FULL_HTML_REPORT_URL" 