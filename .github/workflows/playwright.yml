name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions needed for test-reporter
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    name: Run Playwright Tests - ${{ matrix.shard.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard:
          - { name: 'Abandoned Cart', file: 'tests/abandoned-cart.spec.ts' }
          - { name: 'User Registration', file: 'tests/user-registration-purchase.spec.ts' }
          - { name: 'Guest Purchase', file: 'tests/guest-user-purchase.spec.ts' }
          - { name: 'API Payment Validation', file: 'tests/api-payment-validation.spec.ts' }
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3.0'
        bundler-cache: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvips-dev libpq-dev build-essential libssl-dev libreadline-dev zlib1g-dev
      
    - name: Start PostgreSQL with Docker Compose
      run: docker compose up -d
      
    - name: Fix line ending issues in scripts (if needed)
      run: |
        chmod +x bin/*
        
    - name: Setup Application
      run: |
        bin/setup
        
    - name: Start Rails server in background
      run: |
        bin/rails server -b 0.0.0.0 -p 3000 -d
        echo "Waiting for server to start..."
        sleep 30
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        
    - name: Install Playwright dependencies
      working-directory: ./playwright-test
      run: |
        npm install
        npx playwright install --with-deps
        
    - name: Run Playwright test shard
      working-directory: ./playwright-test
      run: npx playwright test ${{ matrix.shard.file }} --reporter=html,junit
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ matrix.shard.name }}
        path: |
          playwright-test/playwright-report/
          playwright-test/test-results/
          playwright-test/junit.xml

  merge-reports:
    name: Merge Test Reports
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install Playwright and JUnit merger
        run: |
          npm install -g @playwright/test
          npm install -g junit-report-merger
          npm install -g playwright-merge-html-reports
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Display structure of downloaded files
        run: find all-artifacts -type f | sort
        
      - name: Find HTML reports
        run: |
          echo "HTML report files:"
          find all-artifacts -path "*/playwright-report/*" -type f | grep -v "trace" | head -20
        
      - name: Create report directories
        run: |
          mkdir -p merged-playwright-report
          mkdir -p individual-reports
        
      - name: Extract individual reports
        run: |
          for shard in "Abandoned Cart" "User Registration" "Guest Purchase" "API Payment Validation"; do
            if [ -d "all-artifacts/playwright-report-$shard/playwright-report" ]; then
              mkdir -p "individual-reports/$shard"
              cp -r "all-artifacts/playwright-report-$shard/playwright-report"/* "individual-reports/$shard/"
            fi
          done
          
      - name: Create merged HTML report using playwright-merge-html-reports
        run: |
          # Find all index.html files from individual reports
          report_dirs=$(find individual-reports -type d -maxdepth 1 -mindepth 1)
          
          if [ -n "$report_dirs" ]; then
            # Run the merge utility
            echo "Merging reports from: $report_dirs"
            npx playwright-merge-html-reports --config '{"outputFolderName":"merged-playwright-report"}' $report_dirs
          else
            # Create a placeholder if no reports found
            echo "<html><head><title>No Test Reports Available</title></head><body><h1>No Test Reports Available</h1></body></html>" > merged-playwright-report/index.html
          fi
        
      - name: Merge JUnit reports
        run: |
          echo "JUnit XML files:"
          find all-artifacts -name "junit.xml" -type f
          
          # Collect JUnit files
          find all-artifacts -name "junit.xml" -type f > junit-files.txt
          
          if [ -s junit-files.txt ]; then
            echo "Merging JUnit reports..."
            jrm merged-junit.xml @junit-files.txt
            echo "Merged JUnit report created"
            ls -la merged-junit.xml
          else
            echo "No JUnit files found to merge"
            # Create an empty report file to avoid workflow failure
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuites />' > merged-junit.xml
          fi
          
      - name: Upload merged HTML report
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: merged-playwright-report
          
      - name: Upload merged JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: merged-junit-report
          path: merged-junit.xml
          
      - name: GitHub Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Playwright Tests
          path: merged-junit.xml
          reporter: java-junit
          fail-on-error: false
